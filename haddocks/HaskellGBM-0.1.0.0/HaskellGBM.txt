-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on Github at
--   <a>https://github.com/dpkatz/HaskellGBM#readme</a>
@package HaskellGBM
@version 0.1.0.0

module LightGBM.DataSet

-- | A set of data to use for training or prediction.
data DataSet
CSVFile :: FilePath -> HasHeader -> DataSet
[dataPath] :: DataSet -> FilePath
[hasHeader] :: DataSet -> HasHeader

-- | Describes whether a CSV data file has a header row or not.
newtype HasHeader
HasHeader :: Bool -> HasHeader
[getHeader] :: HasHeader -> Bool

-- | Load data from a file.
--   
--   LightGBM can read data from CSV or TSV files (or from LibSVM formatted
--   files).
--   
--   Note that the LightGBM data file format traditionally consists of
--   putting the output (aka the <i>labels</i>) in the first column, and
--   the inputs (aka the <i>features</i>) in the subsequent columns.
--   However, you can instruct LightGBM to
--   
--   <ul>
--   <li>use some other column for the labels with the <a>LabelColumn</a>
--   parameter, and</li>
--   <li>ignore some of the feature columns with the <a>IgnoreColumns</a>
--   parameter.</li>
--   </ul>
fromCSV :: HasHeader -> FilePath -> DataSet

-- | Load data from a <a>Frame</a> into a <a>DataSet</a>
--   
--   Note that this function causes the creation of a file, and it is up to
--   the caller to control the lifetime of this file. This function is
--   typically called in a <a>bracket</a> or a similar facility. For
--   example:
--   
--   <pre>
--   withSystemTempFile "inputFrame" $ \ inputFile inputHandle -&gt; do
--     hClose trainHandle
--     dataset &lt;- fromFrame inFrame inputFile
--   </pre>
--   
--   where <tt>inFrame</tt> is the input <a>Frame</a>.
fromFrame :: (ColumnHeaders ts, AsVinyl ts, Foldable f, RecAll Identity (UnColumn ts) Show) => f (Record ts) -> FilePath -> IO DataSet

-- | Write a <a>DataSet</a> out to a CSV file.
toCSV :: FilePath -> DataSet -> IO ()

-- | Convert a <a>DataSet</a> out to a <a>Frame</a>.
--   
--   If the <a>DataSet</a> doesn't have headers, then <a>Frame</a> headers
--   are generated with names <tt>column_i</tt> where <tt>i</tt> is the
--   index of the column in question (starting at 0).
--   
--   Note that this function is polymorphic in the row type - the caller
--   will have to define that explicitly or in context. (See the doctest
--   below for a simplistic example.)
--   
--   <pre>
--   &gt;&gt;&gt; :set -XTypeOperators
--   
--   &gt;&gt;&gt; :set -XDataKinds
--   
--   &gt;&gt;&gt; import Frames ((:-&gt;))
--   
--   &gt;&gt;&gt; import qualified Frames as F
--   
--   &gt;&gt;&gt; import System.IO (hPutStrLn, hClose)
--   
--   &gt;&gt;&gt; import System.IO.Temp as TMP
--   
--   &gt;&gt;&gt; :{
--     TMP.withSystemTempFile "toFrameTest" $ \ filepath handle -&gt; do
--       hPutStrLn handle "results\n1\n2\n3\n4\n5"
--       hClose handle
--       let ds = fromCSV (HasHeader True) filepath
--       dsf &lt;- toFrame ds :: IO (F.Frame (F.Record '["results" :-&gt; Int]))
--       return $ length dsf
--   :}
--   5
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; :{
--     TMP.withSystemTempFile "toFrameTest" $ \ filepath handle -&gt; do
--       hPutStrLn handle "1\n2\n3\n4"
--       hClose handle
--       let ds = fromCSV (HasHeader False) filepath
--       dsf &lt;- toFrame ds :: IO (F.Frame (F.Record '["column_0" :-&gt; Int]))
--       return $ length dsf
--   :}
--   4
--   </pre>
toFrame :: (RecVec rs, ReadRec rs) => DataSet -> IO (FrameRec rs)
instance GHC.Show.Show LightGBM.DataSet.DataSet
instance GHC.Classes.Eq LightGBM.DataSet.DataSet
instance GHC.Show.Show LightGBM.DataSet.HasHeader
instance GHC.Classes.Eq LightGBM.DataSet.HasHeader

module LightGBM.Internal.CLIParameters

-- | Parameters restricted to the CLI
data CommandLineParam

-- | Path to config file
ConfigFile :: FilePath -> CommandLineParam

-- | Task to perform (train, predict, etc.)
Task :: TaskType -> CommandLineParam

-- | True if the input data has a header
Header :: Bool -> CommandLineParam

-- | Model Conversion parameters
data ModelConvParam
ConvertModelLanguage :: ModelLang -> ModelConvParam
ConvertModelOutput :: FilePath -> ModelConvParam
data ModelLang
CPP :: ModelLang
data TaskType

-- | Training
Train :: TaskType

-- | Prediction
Predict :: TaskType

-- | Conversion into an if-then-else format
ConvertModel :: [ModelConvParam] -> TaskType

-- | Refitting existing models with new data
Refit :: TaskType
instance GHC.Show.Show LightGBM.Internal.CLIParameters.CommandLineParam
instance GHC.Classes.Eq LightGBM.Internal.CLIParameters.CommandLineParam
instance GHC.Show.Show LightGBM.Internal.CLIParameters.TaskType
instance GHC.Classes.Eq LightGBM.Internal.CLIParameters.TaskType
instance GHC.Show.Show LightGBM.Internal.CLIParameters.ModelConvParam
instance GHC.Classes.Eq LightGBM.Internal.CLIParameters.ModelConvParam
instance GHC.Show.Show LightGBM.Internal.CLIParameters.ModelLang
instance GHC.Classes.Eq LightGBM.Internal.CLIParameters.ModelLang


module LightGBM.Utils.Csv

-- | Read in the n'th column of a CSV file
readColumn :: Read a => Int -> HasHeader -> ByteString -> Vector a

-- | Drop the selected columns of the CSV file
--   
--   <pre>
--   &gt;&gt;&gt; csv = pack "h0,h1,h2,h3,h4\n0,1,2,3,4\n10,11,12,13,14\n"
--   
--   &gt;&gt;&gt; dropColumns [1, 3] csv
--   "h0,h2,h4\r\n0,2,4\r\n10,12,14\r\n"
--   </pre>
dropColumns :: Foldable t => t Int -> ByteString -> ByteString

-- | Keep only the selected columns of the CSV file
--   
--   <pre>
--   &gt;&gt;&gt; csv = pack "h0,h1,h2,h3,h4\n0,1,2,3,4\n10,11,12,13,14\n"
--   
--   &gt;&gt;&gt; keepColumns [1, 3] csv
--   "h1,h3\r\n1,3\r\n11,13\r\n"
--   </pre>
keepColumns :: Foldable t => t Int -> ByteString -> ByteString
dropNamedColumns :: (Foldable t, Functor t) => t ByteString -> ByteString -> ByteString
keepNamedColumns :: (Foldable t, Functor t) => t ByteString -> ByteString -> ByteString


module LightGBM.Utils.Test

-- | Determine if two files are the same (byte identical)
fileDiff :: FilePath -> FilePath -> IO Bool


-- | Some utility types used across the library.
module LightGBM.Utils.Types

-- | An <a>Int</a> in the range [1, <tt><a>maxBound</a> :: <a>Int</a></tt>]
type PositiveInt = Refined Positive Int

-- | An <a>Int</a> in the range [2, <tt><a>maxBound</a> :: <a>Int</a></tt>]
type IntGreaterThanOne = Refined (GreaterThan 1) Int

-- | A <a>Double</a> in the range [0, 1]
type ProperFraction = Refined (And (Not (LessThan 0)) (Not (GreaterThan 1))) Double

-- | A <a>Double</a> in the range (0, 1)
type OpenProperFraction = Refined (And (GreaterThan 0) (LessThan 1)) Double

-- | A <a>Double</a> in the range (0, 1]
type LeftOpenProperFraction = Refined (And (GreaterThan 0) (Not (GreaterThan 1))) Double

-- | A <a>Double</a> in the range [1, 2)
type OneToTwoLeftSemiClosed = Refined (And (Not (LessThan 1)) (LessThan 2)) Double

-- | A <a>Double</a> &gt; 0.0
type PositiveDouble = Refined Positive Double

-- | A <a>Double</a> &gt;= 0.0
type NonNegativeDouble = Refined NonNegative Double

-- | A transcript of the output logging of LightGBM
newtype OutLog
OutLog :: Text -> OutLog

-- | A transcript of the error logging of LightGBM
newtype ErrLog
ErrLog :: Text -> ErrLog
instance GHC.Show.Show LightGBM.Utils.Types.ErrLog
instance GHC.Show.Show LightGBM.Utils.Types.OutLog
instance (Data.Hashable.Class.Hashable a, Refined.Predicate p a) => Data.Hashable.Class.Hashable (Refined.Refined p a)


-- | Parameter types for LightGBM.
--   
--   Parameter details are documented in the <a>LightGBM documentation</a>.
--   
--   Note that some of the parameters listed in the documentation are not
--   exposed here since they're set implicitly through other parts of the
--   API. For instance, the <tt>task</tt> param is set in the
--   <a>LightGBM.Model</a> API, and the <tt>header</tt> param is set in the
--   <a>LightGBM.DataSet</a> API.
module LightGBM.Parameters

-- | Parameters control the behavior of lightGBM.
data Param

-- | Regression, binary classification, etc.
Objective :: Application -> Param

-- | Booster to apply - by default is <a>GBDT</a>
BoostingType :: Booster -> Param

-- | Path to training data
TrainingData :: FilePath -> Param

-- | Paths to validation data files (supports multi-validation)
ValidationData :: [FilePath] -> Param

-- | Path to data to use for a prediction
PredictionData :: FilePath -> Param

-- | Number of boosting iterations - default is 100
Iterations :: Natural -> Param

-- | Scale how quickly parameters change in training
LearningRate :: PositiveDouble -> Param

-- | Maximum number of leaves in one tree
NumLeaves :: PositiveInt -> Param

-- | Called <tt>tree_learner</tt> in the LightGBM docs
Parallelism :: ParallelismStyle -> Param

-- | Number of threads for LightGBM to use
NumThreads :: Natural -> Param

-- | GPU or CPU
Device :: Device -> Param

-- | A random seed used to generate other random seeds
RandomSeed :: Int -> Param

-- | Limit the depth of the tree model
MaxDepth :: Natural -> Param

-- | Minimum data count in a leaf
MinDataInLeaf :: Natural -> Param

-- | Minimal sum of the Hessian in one leaf
MinSumHessianInLeaf :: NonNegativeDouble -> Param
BaggingFraction :: LeftOpenProperFraction -> Param
BaggingFreq :: PositiveInt -> Param
BaggingFractionSeed :: Int -> Param
FeatureFraction :: LeftOpenProperFraction -> Param
FeatureFractionSeed :: Int -> Param

-- | Stop training if a validation metric doesn't improve in the last n
--   rounds
EarlyStoppingRounds :: PositiveInt -> Param
Regularization_L1 :: NonNegativeDouble -> Param
Regularization_L2 :: NonNegativeDouble -> Param
MaxDeltaStep :: PositiveDouble -> Param
MinSplitGain :: NonNegativeDouble -> Param

-- | Minimum number of data points per categorial group
MinDataPerGroup :: PositiveInt -> Param
MaxCatThreshold :: PositiveInt -> Param
CatSmooth :: NonNegativeDouble -> Param

-- | L2 regularization in categorical split
CatL2 :: NonNegativeDouble -> Param
MaxCatToOneHot :: PositiveInt -> Param

-- | VotingPar only
TopK :: PositiveInt -> Param

-- | Length of directions = number of features
MonotoneConstraint :: [Direction] -> Param
MaxBin :: IntGreaterThanOne -> Param
MinDataInBin :: PositiveInt -> Param
DataRandomSeed :: Int -> Param

-- | Where to persist the model after training
OutputModel :: FilePath -> Param

-- | Filepath to a persisted model to use for prediction or additional
--   training
InputModel :: FilePath -> Param

-- | Where to persist the output of a prediction task
OutputResult :: FilePath -> Param
PrePartition :: Bool -> Param
IsSparse :: Bool -> Param
TwoRoundLoading :: Bool -> Param
SaveBinary :: Bool -> Param
Verbosity :: VerbosityLevel -> Param

-- | Which column has the labels
LabelColumn :: ColumnSelector -> Param

-- | Which column has the weights
WeightColumn :: ColumnSelector -> Param
QueryColumn :: ColumnSelector -> Param

-- | Select columns to ignore in training
IgnoreColumns :: [ColumnSelector] -> Param

-- | Select columns to use as features
CategoricalFeatures :: [ColumnSelector] -> Param

-- | Prediction Only; true = raw scores only, false = transformed scores
PredictRawScore :: Bool -> Param

-- | Prediction Only
PredictLeafIndex :: Bool -> Param

-- | Prediction Only
PredictContrib :: Bool -> Param
BinConstructSampleCount :: PositiveInt -> Param

-- | Prediction Only; how many trained predictions
NumIterationsPredict :: Natural -> Param
PredEarlyStop :: Bool -> Param
PredEarlyStopFreq :: Natural -> Param
PredEarlyStopMargin :: Double -> Param
UseMissing :: Bool -> Param
ZeroAsMissing :: Bool -> Param
InitScoreFile :: FilePath -> Param
ValidInitScoreFile :: [FilePath] -> Param
ForcedSplits :: FilePath -> Param

-- | Used in Binary classification and LambdaRank
Sigmoid :: PositiveDouble -> Param

-- | Used in Huber loss and Quantile regression
Alpha :: OpenProperFraction -> Param

-- | Used only in RegressionL2 task
BoostFromAverage :: Bool -> Param

-- | Only used in RegressionL2
RegSqrt :: Bool -> Param

-- | Loss Metric
Metric :: [Metric] -> Param
MetricFreq :: PositiveInt -> Param
TrainingMetric :: Bool -> Param

-- | LightGBM can be used for a variety of applications
data Application
Regression :: RegressionApp -> Application
BinaryClassification :: [BinaryClassParam] -> Application
MultiClass :: MultiClassStyle -> NumClasses -> Application
CrossEntropy :: XEApp -> Application

-- | A ranking algorithm
LambdaRank :: [LambdaRankParam] -> Application
data BinaryClassParam

-- | Set to true if training data are unbalanced
IsUnbalance :: Bool -> BinaryClassParam
ScalePosWeight :: PositiveDouble -> BinaryClassParam

-- | Different types of Boosting approaches
data Booster

-- | Gradient Boosting Decision Tree
GBDT :: Booster
RandomForest :: Booster

-- | Dropouts meet Multiple Additive Regression Trees
DART :: [DARTParam] -> Booster

-- | Gradient-based One-Sided Sampling
GOSS :: [GOSSParam] -> Booster

-- | Parameters exclusively for the DART booster
data DARTParam

-- | Dropout rate
DropRate :: ProperFraction -> DARTParam

-- | Probablility of skipping a drop
SkipDrop :: ProperFraction -> DARTParam

-- | Max number of dropped trees on one iteration
MaxDrop :: PositiveInt -> DARTParam
UniformDrop :: Bool -> DARTParam
XGBoostDARTMode :: Bool -> DARTParam
DropSeed :: Int -> DARTParam
data Device
CPU :: Device
GPU :: [GPUParam] -> Device
data Direction
Increasing :: Direction
Decreasing :: Direction
NoConstraint :: Direction
data FairRegressionParam
FairC :: PositiveDouble -> FairRegressionParam
data GOSSParam
TopRate :: ProperFraction -> GOSSParam
OtherRate :: ProperFraction -> GOSSParam
data GPUParam
GpuPlatformId :: Natural -> GPUParam
GpuDeviceId :: Natural -> GPUParam
GpuUseDP :: Bool -> GPUParam
data LambdaRankParam
MaxPosition :: PositiveInt -> LambdaRankParam

-- | Used in LambdaRank
LabelGain :: [Double] -> LambdaRankParam
type LocalListenPort = Natural
type MachineListFile = FilePath
data Metric
MeanAbsoluteError :: Metric
MeanSquareError :: Metric
L2_root :: Metric
QuantileRegression :: Metric
MAPELoss :: Metric
HuberLoss :: Metric
FairLoss :: Metric
PoissonNegLogLikelihood :: Metric
GammaNegLogLikelihood :: Metric
GammaDeviance :: Metric
TweedieNegLogLiklihood :: Metric
NDCG :: (Maybe NDCGEvalPositions) -> Metric
MAP :: Metric
AUC :: Metric
BinaryLogloss :: Metric
BinaryError :: Metric
MultiLogloss :: Metric
MultiError :: Metric
Xentropy :: Metric
XentLambda :: Metric
KullbackLeibler :: Metric
type Minutes = Natural

-- | Multi-classification styles
data MultiClassStyle
MultiClassSimple :: MultiClassStyle
MultiClassOneVsAll :: MultiClassStyle
type NDCGEvalPositions = [Natural]
type NumClasses = Natural
type NumMachines = PositiveInt
data ParallelismParams
SocketVer :: NumMachines -> MachineListFile -> LocalListenPort -> Minutes -> ParallelismParams
[nMachines] :: ParallelismParams -> NumMachines
[machineList] :: ParallelismParams -> MachineListFile
[port] :: ParallelismParams -> LocalListenPort
[timeOut] :: ParallelismParams -> Minutes
MPIVer :: NumMachines -> ParallelismParams
[nMachines] :: ParallelismParams -> NumMachines
data ParallelismStyle
Serial :: ParallelismStyle
FeaturePar :: ParallelismParams -> ParallelismStyle
DataPar :: ParallelismParams -> ParallelismStyle
VotingPar :: ParallelismParams -> ParallelismStyle

-- | Parameters for Poisson regression
data PoissonRegressionParam
PoissonMaxDeltaStep :: PositiveDouble -> PoissonRegressionParam

-- | Different types of regression metrics
data RegressionApp

-- | Absolute error metric
L1 :: RegressionApp

-- | RMS errror metric
L2 :: RegressionApp
Huber :: RegressionApp
Fair :: [FairRegressionParam] -> RegressionApp
Poisson :: [PoissonRegressionParam] -> RegressionApp
Quantile :: RegressionApp
MAPE :: RegressionApp
Gamma :: RegressionApp
Tweedie :: [TweedieRegressionParam] -> RegressionApp
data TweedieRegressionParam

-- | Control Tweedie variance in range [1, 2) - 1 is like Poisson, 2 is
--   like Gamma
TweedieVariancePower :: OneToTwoLeftSemiClosed -> TweedieRegressionParam
data VerbosityLevel
Fatal :: VerbosityLevel
Warn :: VerbosityLevel
Info :: VerbosityLevel
data XEApp
XEntropy :: XEApp
XEntropyLambda :: XEApp

-- | Some parameters are based on column selection either by index or by
--   name. A <a>ColumnSelector</a> encapsulates this flexibility.
data ColumnSelector
Index :: Natural -> ColumnSelector
ColName :: String -> ColumnSelector
colSelArgument :: ColumnSelector -> String
instance GHC.Show.Show LightGBM.Parameters.Param
instance GHC.Classes.Eq LightGBM.Parameters.Param
instance GHC.Show.Show LightGBM.Parameters.ColumnSelector
instance GHC.Classes.Eq LightGBM.Parameters.ColumnSelector
instance GHC.Generics.Generic LightGBM.Parameters.Booster
instance GHC.Show.Show LightGBM.Parameters.Booster
instance GHC.Classes.Eq LightGBM.Parameters.Booster
instance GHC.Generics.Generic LightGBM.Parameters.GOSSParam
instance GHC.Show.Show LightGBM.Parameters.GOSSParam
instance GHC.Classes.Eq LightGBM.Parameters.GOSSParam
instance GHC.Generics.Generic LightGBM.Parameters.DARTParam
instance GHC.Show.Show LightGBM.Parameters.DARTParam
instance GHC.Classes.Eq LightGBM.Parameters.DARTParam
instance GHC.Generics.Generic LightGBM.Parameters.Application
instance GHC.Show.Show LightGBM.Parameters.Application
instance GHC.Classes.Eq LightGBM.Parameters.Application
instance GHC.Generics.Generic LightGBM.Parameters.Metric
instance GHC.Show.Show LightGBM.Parameters.Metric
instance GHC.Classes.Eq LightGBM.Parameters.Metric
instance GHC.Generics.Generic LightGBM.Parameters.VerbosityLevel
instance GHC.Show.Show LightGBM.Parameters.VerbosityLevel
instance GHC.Classes.Eq LightGBM.Parameters.VerbosityLevel
instance GHC.Generics.Generic LightGBM.Parameters.Direction
instance GHC.Show.Show LightGBM.Parameters.Direction
instance GHC.Classes.Eq LightGBM.Parameters.Direction
instance GHC.Generics.Generic LightGBM.Parameters.Device
instance GHC.Show.Show LightGBM.Parameters.Device
instance GHC.Classes.Eq LightGBM.Parameters.Device
instance GHC.Generics.Generic LightGBM.Parameters.GPUParam
instance GHC.Show.Show LightGBM.Parameters.GPUParam
instance GHC.Classes.Eq LightGBM.Parameters.GPUParam
instance GHC.Generics.Generic LightGBM.Parameters.ParallelismStyle
instance GHC.Show.Show LightGBM.Parameters.ParallelismStyle
instance GHC.Classes.Eq LightGBM.Parameters.ParallelismStyle
instance GHC.Generics.Generic LightGBM.Parameters.ParallelismParams
instance GHC.Show.Show LightGBM.Parameters.ParallelismParams
instance GHC.Classes.Eq LightGBM.Parameters.ParallelismParams
instance GHC.Generics.Generic LightGBM.Parameters.XEApp
instance GHC.Show.Show LightGBM.Parameters.XEApp
instance GHC.Classes.Eq LightGBM.Parameters.XEApp
instance GHC.Generics.Generic LightGBM.Parameters.MultiClassStyle
instance GHC.Show.Show LightGBM.Parameters.MultiClassStyle
instance GHC.Classes.Eq LightGBM.Parameters.MultiClassStyle
instance GHC.Generics.Generic LightGBM.Parameters.RegressionApp
instance GHC.Show.Show LightGBM.Parameters.RegressionApp
instance GHC.Classes.Eq LightGBM.Parameters.RegressionApp
instance GHC.Generics.Generic LightGBM.Parameters.TweedieRegressionParam
instance GHC.Show.Show LightGBM.Parameters.TweedieRegressionParam
instance GHC.Classes.Eq LightGBM.Parameters.TweedieRegressionParam
instance GHC.Generics.Generic LightGBM.Parameters.PoissonRegressionParam
instance GHC.Show.Show LightGBM.Parameters.PoissonRegressionParam
instance GHC.Classes.Eq LightGBM.Parameters.PoissonRegressionParam
instance GHC.Generics.Generic LightGBM.Parameters.FairRegressionParam
instance GHC.Show.Show LightGBM.Parameters.FairRegressionParam
instance GHC.Classes.Eq LightGBM.Parameters.FairRegressionParam
instance GHC.Generics.Generic LightGBM.Parameters.BinaryClassParam
instance GHC.Show.Show LightGBM.Parameters.BinaryClassParam
instance GHC.Classes.Eq LightGBM.Parameters.BinaryClassParam
instance GHC.Generics.Generic LightGBM.Parameters.LambdaRankParam
instance GHC.Show.Show LightGBM.Parameters.LambdaRankParam
instance GHC.Classes.Eq LightGBM.Parameters.LambdaRankParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.Booster
instance Data.Hashable.Class.Hashable LightGBM.Parameters.GOSSParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.DARTParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.Application
instance Data.Hashable.Class.Hashable LightGBM.Parameters.Metric
instance Data.Hashable.Class.Hashable LightGBM.Parameters.VerbosityLevel
instance Data.Hashable.Class.Hashable LightGBM.Parameters.Direction
instance Data.Hashable.Class.Hashable LightGBM.Parameters.Device
instance Data.Hashable.Class.Hashable LightGBM.Parameters.GPUParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.ParallelismStyle
instance Data.Hashable.Class.Hashable LightGBM.Parameters.ParallelismParams
instance Data.Hashable.Class.Hashable LightGBM.Parameters.XEApp
instance Data.Hashable.Class.Hashable LightGBM.Parameters.MultiClassStyle
instance Data.Hashable.Class.Hashable LightGBM.Parameters.RegressionApp
instance Data.Hashable.Class.Hashable LightGBM.Parameters.TweedieRegressionParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.PoissonRegressionParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.FairRegressionParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.BinaryClassParam
instance Data.Hashable.Class.Hashable LightGBM.Parameters.LambdaRankParam

module LightGBM.Internal.CommandLineWrapper

-- | Run the LightGBM executable with appropriate parameters
run :: FilePath -> [Param] -> [CommandLineParam] -> IO (Either ErrLog OutLog)

module LightGBM.Model

-- | A model to use to make predictions
data Model

-- | Train a new model and persist it to a file.
trainNewModel :: [Param] -> DataSet -> [DataSet] -> IO (Either ErrLog Model)

-- | Persisted models can be loaded up and used for prediction.
readModelFile :: FilePath -> IO Model

-- | Models can be written out to a file
writeModelFile :: FilePath -> Model -> IO ()

-- | Predict the results of new inputs and persist the results to an output
--   file.
predict :: Model -> [Param] -> DataSet -> IO (Either ErrLog DataSet)
instance GHC.Show.Show LightGBM.Model.Model
instance GHC.Classes.Eq LightGBM.Model.Model


-- | A simple wrapper around the <a>Microsoft LightGBM library</a>.
--   Documentation for the various library parameters (see
--   <a>LightGBM.Parameters</a>) can be found <a>here</a>.
--   
--   <i>N.B. The <tt>lightgbm</tt> executable must be on the system
--   <tt>PATH</tt>.</i>
--   
--   <b><i>N.B. This is alpha-level software and should not be</i></b>
--   <b><i>used in production since the API may still change
--   substantially.</i></b>
--   
--   The basic usage of the library looks something like this:
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   
--   [...]
--   
--   import           LightGBM ( toCSV
--                             , readCsvFile
--                             , HasHeader(..)
--                             , trainNewModel)
--   import qualified LightGBM.Parameters as P
--   import           Refined (refineTH)
--   
--   let modelFile = "/path/to/model/output"
--       trainingData = readCsvFile (HasHeader False) "/path/to/training/data"
--       validationData = readCsvFile (HasHeader False) "/path/to/validation/data"
--       trainingParams = [ P.App P.Binary
--                        , P.Metric [P.BinaryLogloss, P.AUC]
--                        , P.TrainingMetric True
--                        , P.LearningRate 0.1
--                        , P.NumLeaves 63
--                        , P.FeatureFraction $$(refineTH 0.8)
--                        , P.BaggingFreq $$(refineTH 5)
--                        , P.BaggingFraction $$(refineTH 0.8)
--                        , P.MinDataInLeaf 50
--                        , P.MinSumHessianInLeaf 5.0
--                        , P.IsSparse True
--                        ]
--   
--   modelOut &lt;- trainNewModel trainingParams trainingData validationData
--   case modelOut of
--       Left err -&gt; ... -- handle the errors
--       Right model -&gt; do
--           let newData = readCsvFile (HasHeader False) "/path/to/inputs_for_prediction"
--               outputFile = "/path/to/prediction_outputs"
--           predOut &lt;- predict model [] newData
--           case predOut of
--               Left err -&gt; ... -- handle the errors
--               Right preds -&gt; toCSV outputFile preds
--   </pre>
module LightGBM
